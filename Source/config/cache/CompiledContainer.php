<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Slim\\App' => 'get1',
  'Psr\\Log\\LoggerInterface' => 'get2',
  'Symfony\\Component\\Validator\\Validator\\ValidatorInterface' => 'get3',
  'Fenom' => 'get4',
  'env' => 'get5',
);

    protected function get1()
    {
        return $this->resolveFactory(static function($container) {
        $app = \Slim\Factory\AppFactory::createFromContainer($container);
        require ROOT_PATH.'/config/routes.php';
        return $app;
    }, 'Slim\\App');
    }

    protected function get2()
    {
        return $this->resolveFactory(static function() {
        return new \Monolog\Logger('main', [new \Monolog\Handler\StreamHandler(ROOT_PATH.'/log/main.log', \Monolog\Logger::INFO)]);
    }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get3()
    {
        return $this->resolveFactory(static function() {
        return (new \Symfony\Component\Validator\ValidatorBuilder())->getValidator();
    }, 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface');
    }

    protected function get4()
    {
        return $this->resolveFactory(static function ($container) {
        $fenom = \Fenom::factory(ROOT_PATH.'/templates', ROOT_PATH.'/cache/templates',
            \Fenom::AUTO_RELOAD | \Fenom::AUTO_STRIP | \Fenom::AUTO_ESCAPE
        );
        $fenom->addModifier('route', function($variable, $params = []) use ($container) {
            /* @var Slim\App $app */
            $app = $container->get(\Slim\App::class);
            return $app->getRouteCollector()->getNamedRoute($variable)->getPattern();
        });
        return $fenom;
    }, 'Fenom');
    }

    protected function get5()
    {
        return $this->resolveFactory(static function() {
        $dotenv = \Dotenv\Dotenv::createImmutable(ROOT_PATH.'/.env');
        return $dotenv->safeLoad();
    }, 'env');
    }

}
